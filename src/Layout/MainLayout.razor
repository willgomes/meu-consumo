@using Blazored.LocalStorage
@using global::Layout
@inherits LayoutComponentBase

<MudThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="_isDarkMode" Theme="_theme" />

<MudLayout>
    <MudAppBar Elevation="1">
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start"
            OnClick="@((e) => DrawerToggle())" />
        <MudSpacer />
        <MudIconButton Icon="@_modeIcon" Color="Color.Inherit" Edge="Edge.End" OnClick="ToggleDarkModeAsync" />
    </MudAppBar>
    <MudDrawer @bind-Open="_drawerOpen" Elevation="2">
        <MudDrawerHeader>
            <MudText Typo="Typo.h5" Class="mt-1">Meu Consumo</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>
    <MudMainContent>
        <div style="min-height: calc(100vh - 64px - 64px); display: flex; flex-direction: column;">
            @Body
        </div>
        <MudAppBar Bottom="true" Elevation="1" Style="height: 64px;">
            <MudText Class="mx-auto" Typo="Typo.body2">
                @DateTime.Now.Year - Desenvolvido por <MudLink Color="Color.Default" Href="https://www.willgomes.com.br" Target="_blank" Underline="Underline.None">Wilson Neto</MudLink>
            </MudText>
        </MudAppBar>
    </MudMainContent>
</MudLayout>

@code {

    [Inject] ILocalStorageService _localStorage { get; set; }
    MudTheme _theme = CustomThemes.GetThemes();
    private MudThemeProvider _mudThemeProvider;
    private string _modeIcon => _isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode;
    bool _drawerOpen = true;
    bool _isDarkMode = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            string? hasResult = await _localStorage.GetItemAsStringAsync("darkMode");

            if(string.IsNullOrEmpty(hasResult))
                _isDarkMode = await _mudThemeProvider.GetSystemPreference();
             
            bool.TryParse(hasResult, out bool hasDarkModePreference);

            _isDarkMode = hasDarkModePreference;

            StateHasChanged();
        }
    }

    async Task ToggleDarkModeAsync()
    {
        _isDarkMode = !_isDarkMode;
        
        await _localStorage.SetItemAsync("darkMode", _isDarkMode);
    }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

}

@* Required *@
<MudPopoverProvider />

@* Needed for dialogs *@
<MudDialogProvider />

@* Needed for snackbars *@
<MudSnackbarProvider />