@page "/"
@using Blazored.LocalStorage
@using Infrastructure
@using Microsoft.Extensions.Localization
@using Resources

<MudGrid Class="px-4 py-4">
    <MudItem xs="12" sm="12" md="12" lg="12" xl="12">
        <MudCard>
            <MudCardContent>
                <MudGrid>
                    <MudItem xs="10" sm="10" md="10" lg="10" xl="10">
                        <MudText Typo="Typo.h6" Class="px-4">@Localizer!["EnableNotifications"]</MudText>
                    </MudItem>
                    <MudItem xs="2" sm="2" md="2" lg="2" xl="2">
                        <MudSwitch ThumbIcon="@NotificationIcon" T="bool" @bind-Value="IsNotificationEnabled"
                            Color="Color.Primary" />
                    </MudItem>
                </MudGrid>
            </MudCardContent>
        </MudCard>
    </MudItem>
</MudGrid>

@code
{
    [Inject] ILocalStorageService? LocalStorage { get; set; }
    [Inject] Notifications? Notifications { get; set; }
    [Inject] IStringLocalizer<Resource>? Localizer { get; set; }

    private string NotificationIcon => IsNotificationEnabled ? Icons.Material.Filled.NotificationsActive :
    Icons.Material.Filled.NotificationsOff;

    private bool _isNotificationEnabled;
    public bool IsNotificationEnabled
    {
        get => _isNotificationEnabled;
        set
        {
            if (_isNotificationEnabled != value)
            {
                _isNotificationEnabled = value;

                _ = Task.Run(async () => await EnableNotificationsAsync());
            }
        }
    }

    protected override async Task OnInitializedAsync()
    {
        string? notificationRequest = await LocalStorage!.GetItemAsStringAsync("notificationRequest");

        bool.TryParse(notificationRequest, out bool hasAuthorizedNotification);

        Console.WriteLine($"Notification Request: {hasAuthorizedNotification}");

        _isNotificationEnabled = hasAuthorizedNotification;

    }

    private async Task EnableNotificationsAsync()
    {
        bool result = await Notifications!.RequestPermissionAsync();

        await LocalStorage!.SetItemAsync("notificationRequest", result);
    }

}